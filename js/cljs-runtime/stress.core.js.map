{"version":3,"sources":["stress/core.cljs"],"mappings":"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","names":["stress.core/num-nodes","stress.core/rows","stress.core/cols","js/stress","js/stress.core","js/stress.core.sum-node-value","stress.core/sum-node-value","reagent.core.atom","js/stress.core.nodes","stress.core/nodes","cljs.core.into","cljs.core.range","cljs.core.mapv","idx","x","cljs.core/mod","y","cljs.core/quot","cljs.core._EQ_","js/stress.core.edges","stress.core/edges","cljs.core.merge","stress.core/follow-source","edge","connections","temp__5802__auto__","source","cljs.core.get","sources","p1__26970#","cljs.core/some","cljs.core/name","cljs.core.conj","stress.core/animate","connected","cljs.core.map","connection","cljs.core.dissoc","p1__26976#","cljs.core.assoc","stress.core/sum","cljs.core.transduce","cljs.core.comp","cljs.core/deref","cljs.core.partial","reagent-flow.core/get-node-by-id","cljs.core/+","stress.core/sum-node-edge","or__5002__auto__","cljs.core/first","reagent_flow.core.get_connections_by_node_id","stress.core/find-connected","cljs.core.sequence","p1__26979#","cljs.core.mapcat","cljs.core.filter","cljs.core/some?","stress.core/sum-node","reagent-flow.core/handle","js/stress.core.node-types","stress.core/node-types","stress.core/main","p__27009","map__27010","cljs.core/--destructure-map","delta","cljs.core/reset!","reagent-flow.core/apply-node-changes","reagent-flow.core/apply-edge-changes","pred__27003","expr__27004","cljs.core/=","cljs.core.keyword","cljs.core/count","reagent-flow.core/add-edge","set-center","provider","G__27011","G__27012","G__27013","reagent-flow.core/reagent-flow","handle-node-changes","handle-edge-changes","handle-connect","handle-init","reagent-flow.core/background","js/stress.core.root","stress.core/root","cljs.core.atom","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","stress.core/error-boundary","seq27014","self__5712__auto__","cljs.core/seq","children","error","reagent.core.create_class","e","err","info","vec__27018","cljs.core.nth","_","cljs.core.pr_str","js/console","stress.core/init","element","reagent.dom.client/create-root","reagent.dom.client.render","stress.core/unload","reagent.dom.client/unmount"],"sourcesContent":["(ns stress.core\n  (:require\n   [clojure.set :as set :refer [union]]\n   [reagent.core :as r]\n   [reagent.dom.client :as rdom]\n   [reagent-flow.core\n    :refer [add-edge apply-edge-changes apply-node-changes\n            background handle reagent-flow\n            get-connections-by-node-id get-node-by-id]]))\n\n(def num-nodes 100)\n(def rows (/ num-nodes 10))\n(def cols (/ num-nodes rows))\n\n(defonce sum-node-value (r/atom 0))\n\n(defonce nodes\n  (r/atom (into (->> (range 1 (inc num-nodes))\n                     (mapv (fn [idx]\n                             (let [x (* 200 (mod (dec idx) cols))\n                                   y (* 200 (quot (dec idx) cols))]\n                               {:id       (str \"node-\" idx)\n                                :type     (if (= idx 1) :input :default)\n                                :position {:x x :y y}\n                                :data     {:label (str \"Node #\" idx)\n                                           :value idx}}))))\n                [{:id        :sum-node\n                  :type      :sum-node\n                  :deletable false\n                  :position  {:x (* 200 (dec cols)) :y (* 200 rows)}}])))\n\n(defonce edges\n  (r/atom (->> (range 1 (inc num-nodes))\n               (mapv (fn [idx]\n                       (merge \n                        {:id (str \"edge-\" idx)}\n                        (when (> idx 1)\n                          {:source (str \"node-\" (dec idx))})\n                        (when (< idx (inc num-nodes))\n                          {:target (str \"node-\" idx)})))))))\n\n(defn- follow-source [edge connections]\n  (if-let [source (get edge :source)]\n    (let [sources (some #(when (= (name source) (name (:target %))) %) connections)]\n      (conj (follow-source sources connections) edge))\n    [edge]))\n\n(defn- animate [connected connections]\n  (map (fn [connection]\n         (let [connection (dissoc connection :animated)]\n           (if-let [edge (some #(when (= (:target %) (:target connection)) %) connected)]\n             (assoc edge :animated true)\n             connection)))\n       connections))\n\n(defn- sum [connected]\n  (transduce (comp (map :source)\n                (map (partial get-node-by-id @nodes))\n                (map (comp :value :data)))\n             + 0 connected))\n\n(defn- sum-node-edge [connection connections]\n  (or (when (= (:target connection) \"sum-node\") connection)\n      (first (get-connections-by-node-id connections :sum-node :target))))\n\n(defn- find-connected [connection connections]\n  (sequence\n   (comp (mapcat #(follow-source % connections))\n      (filter some?))\n   [(sum-node-edge connection connections)]))\n\n(defn- sum-node []\n  [:<>\n   [:pre (str \"Sum: \" @sum-node-value)]\n   [handle {:id       :sum-handle\n            :type     :target\n            :position :top}]])\n\n(defonce node-types\n  {:sum-node sum-node})\n\n(defn- main []\n  (letfn [(handle-node-changes [delta]\n            (reset! nodes (apply-node-changes delta @nodes)))\n          (handle-edge-changes [delta]\n            (let [connections (apply-edge-changes delta @edges)]\n              (condp = (-> delta first :type (keyword))\n                :remove (let [connected   (find-connected delta connections)\n                              connections (animate connected connections)]\n                          (reset! sum-node-value (sum connected))\n                          (reset! edges connections))\n                (reset! edges connections))))\n          (handle-connect [delta]\n            (let [delta       (assoc delta :id (str \"edge-\" (+ 2 (count @edges))))\n                  connections (add-edge delta @edges)\n                  connected   (find-connected delta connections)\n                  connections (animate connected connections)]\n              (reset! sum-node-value (sum connected))\n              (reset! edges connections)))\n          (handle-init [{:keys [set-center] :as provider}]\n            (let [x (* 200 (dec cols))\n                  y (* 200 (dec rows))]\n              (set-center x y {:zoom 0.85})))]\n    (fn []\n      [reagent-flow {:id                   :stress\n                     :nodes                @nodes\n                     :edges                @edges\n                     :node-types           node-types\n                     :on-nodes-change      handle-node-changes\n                     :on-edges-change      handle-edge-changes\n                     :on-connect           handle-connect\n                     :on-init              handle-init\n                     :connection-line-type :smoothstep\n                     :default-edge-options {:type :smoothstep}}\n       [background {:style {:background-color \"#ffffff\"}}]])))\n\n(defonce root (atom nil))\n\n(defn error-boundary [& children]\n  (let [error (r/atom nil)]\n    (r/create-class\n     {:display-name                 \"ErrorBoundary\" \n      :get-derived-state-from-error (fn [e] #js {})\n      :component-did-catch          (fn [err info] (reset! error [err info])) \n      :reagent-render\n      (fn [& children]\n        (if (nil? @error)\n          (into [:<>] children)\n          (let [[_ info] @error]\n            [:pre.error\n             [:code (pr-str info)]\n             [:br]\n             [:button {:on-click #(.error js/console info)} \"Output stacktrace\"]])))})))\n\n(defn ^:export init [element]\n  (when (nil? @root)\n    (reset! root (rdom/create-root element))\n    (rdom/render @root [error-boundary [main]])))\n\n(defn ^:export unload [element]\n  (when (not (nil? @root))\n    (rdom/unmount @root)\n    (reset! root nil)))\n"]}