{"version":3,"sources":["custom_nodes/core.cljs"],"mappings":"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","names":["custom-nodes.core/nodes","reagent.core.atom","custom-nodes.core/edges","p__26963","map__26966","cljs.core/--destructure-map","cljs.core.get","custom-nodes.core/color-node","id","data","node","cljs.core/deref","reagent-flow.core/get-node-by-id","default-color","event","color","path","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/assoc","p__26968","map__26969","is-connectable","handle-change","reagent-flow.core/handle","p__26973","map__26974","custom-nodes.core/preview-node","selected","map__26975","label","connection","cljs.core/first","reagent-flow.core/get-connections-by-node-id","source","reagent-flow.core/node-resizer","cljs.core.merge","js/custom-nodes","js/custom-nodes.core","js/custom-nodes.core.node-types","custom-nodes.core/node-types","custom-nodes.core/main","changes","cljs.core/reset!","reagent-flow.core/apply-node-changes","reagent-flow.core/apply-edge-changes","reagent-flow.core/add-edge","reagent-flow.core/reagent-flow","handle-node-changes","handle-edge-changes","handle-connect","reagent-flow.core/background","js/custom-nodes.core.root","custom-nodes.core/root","cljs.core.atom","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","custom-nodes.core/error-boundary","seq26984","self__5712__auto__","cljs.core/seq","children","error","reagent.core.create_class","e","err","info","cljs.core.into","vec__26991","cljs.core.nth","_","cljs.core.pr_str","js/console","custom-nodes.core/init","element","reagent.dom.client/create-root","reagent.dom.client.render","custom-nodes.core/unload","reagent.dom.client/unmount"],"sourcesContent":["(ns custom-nodes.core\n  (:require\n   [reagent.core :as r]\n   [reagent.dom.client :as rdom]\n   [reagent-flow.core\n    :refer [add-edge apply-edge-changes apply-node-changes\n            background handle reagent-flow node-resizer\n            get-connections-by-node-id get-node-by-id]]))\n\n(def nodes\n  (r/atom [{:id          :explanation\n            :connectable false\n            :draggable   false\n            :selectable  false\n            :position    {:x 0 :y 0}\n            :data        {:label \"Pick a color & connect the nodes\"}}\n           {:id              :c1\n            :type            :color-node\n            :class-name      :color-node\n            :position        {:x 60 :y 60}\n            :data            {:color \"#e6d5d0\"}\n            :source-position :right}\n           {:id              :p2\n            :type            :preview-node\n            :position        {:x 300 :y 300}\n            :data            {:label \"Preview color\"}\n            :target-position :left}]))\n\n(def edges\n  (r/atom []))\n\n(defn color-node [{:keys [id data]}]\n  (let [node          (get-node-by-id @nodes id)\n        default-color (-> data :color)]\n    (letfn [(handle-change [event]\n              (let [color (-> event .-target .-value)\n                    path  [(:index node) :data]]\n                (swap! nodes update-in path assoc :color color)))]\n      (fn [{is-connectable :isConnectable}]\n        (let [node  (get-node-by-id @nodes id)\n              color (-> node :data :color)]\n          [:<>\n           [:input {:class         [:nodrag :color-picker] \n                    :type          :color\n                    :on-change     handle-change\n                    :value         color\n                    :default-value default-color}]\n           [handle {:type           :source\n                    :position       :right\n                    :id             :a\n                    :is-connectable is-connectable}]])))))\n\n(defn preview-node [{id             :id\n                     is-connectable :isConnectable\n                     selected       :selected}]\n  (let [node            (get-node-by-id @nodes id)\n        {:keys [label]} (:data node)\n        connection      (first (get-connections-by-node-id @edges id))\n        source          (get-node-by-id @nodes (:source connection))\n        color           (-> source :data :color)]\n    [:<>\n     [node-resizer {:is-visible selected\n                    :min-width  80\n                    :min-height 50}]\n     [:div {:style (merge {:background-color :white\n                           :display          :flex\n                           :align-items      :center\n                           :justify-content  :center\n                           :border-radius    :5px\n                           :height           \"100%\"\n                           :padding          :1em}\n                          (when connection {:background-color color}))}\n      [:strong {:style {:color  color\n                        :filter \"invert(100%) grayscale(1)\"}} label]]\n     [handle {:type           :target\n              :position       :left\n              :id             :b\n              :is-connectable is-connectable}]]))\n\n(defonce node-types\n  {:color-node   color-node\n   :preview-node preview-node})\n\n(defn- main []\n  (letfn [(handle-node-changes [changes]\n            (reset! nodes (apply-node-changes changes @nodes)))\n          (handle-edge-changes [changes]\n            (reset! edges (apply-edge-changes changes @edges)))\n          (handle-connect [connection]\n            (reset! edges (add-edge connection @edges)))]\n    (fn []\n      [reagent-flow {:nodes                @nodes\n                     :edges                @edges\n                     :node-types           node-types\n                     :fit-view             true\n                     :on-nodes-change      handle-node-changes\n                     :on-edges-change      handle-edge-changes\n                     :on-connect           handle-connect\n                     :connection-line-type :smoothstep\n                     :default-edge-options {:animated true\n                                            :type     :smoothstep}}\n       [background {:style {:background-color \"#ffffff\"}}]])))\n\n(defonce root (atom nil))\n\n(defn error-boundary [& children]\n  (let [error (r/atom nil)]\n    (r/create-class\n     {:display-name                 \"ErrorBoundary\" \n      :get-derived-state-from-error (fn [e] #js {})\n      :component-did-catch          (fn [err info] (reset! error [err info])) \n      :reagent-render\n      (fn [& children]\n        (if (nil? @error)\n          (into [:<>] children)\n          (let [[_ info] @error]\n            [:pre.error\n             [:code (pr-str info)]\n             [:br]\n             [:button {:on-click #(.error js/console info)} \"Output stacktrace\"]])))})))\n\n(defn ^:export init [element]\n  (when (nil? @root)\n    (reset! root (rdom/create-root element))\n    (rdom/render @root [error-boundary [main]])))\n\n(defn ^:export unload [element]\n  (when (not (nil? @root))\n    (rdom/unmount @root)\n    (reset! root nil)))\n"]}