{"version":3,"sources":["drop_it_like_its_hot/core.cljs"],"mappings":"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","names":["js/drop-it-like-its-hot","js/drop-it-like-its-hot.core","js/drop-it-like-its-hot.core.node-id","drop-it-like-its-hot.core/node-id","reagent.core.atom","js/drop-it-like-its-hot.core.nodes","drop-it-like-its-hot.core/nodes","js/drop-it-like-its-hot.core.edges","drop-it-like-its-hot.core/edges","drop-it-like-its-hot.core/main","flow","cljs.core.atom","provider","viewport","data-type","event","data-transfer","changes","cljs.core/reset!","cljs.core/deref","reagent-flow.core/apply-node-changes","reagent-flow.core/apply-edge-changes","connection","reagent-flow.core/add-edge","temp__5804__auto__","node-type","map__26977","cljs.core/--destructure-map","cljs.core.get","screen-to-flow-position","flow-el","rect","position","G__26978","cljs.core.swap_BANG_","cljs.core/inc","cljs.core/conj","p1__26964#","p1__26967#","p1__26965#","handle-drag","reagent-flow.core/reagent-flow","handle-node-changes","handle-edge-changes","handle-connect","handle-drop","handle-drag-over","reagent-flow.core/background","js/drop-it-like-its-hot.core.root","drop-it-like-its-hot.core/root","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","drop-it-like-its-hot.core/error-boundary","seq26983","self__5712__auto__","cljs.core/seq","children","error","reagent.core.create_class","e","err","info","cljs.core.into","vec__26988","cljs.core.nth","_","cljs.core.pr_str","js/console","drop-it-like-its-hot.core/init","element","reagent.dom.client/create-root","reagent.dom.client.render","drop-it-like-its-hot.core/unload","reagent.dom.client/unmount"],"sourcesContent":["(ns drop-it-like-its-hot.core\n  (:require\n   [reagent.core :as r]\n   [reagent.dom.client :as rdom]\n   [reagent-flow.core\n    :refer [add-edge apply-edge-changes apply-node-changes\n            background reagent-flow reagent-flow-provider\n            use-on-viewport-change\n            get-node-by-id]]))\n\n(defonce node-id\n  (r/atom 0))\n\n(defonce nodes\n  (r/atom [{:id          \"explanation\"\n            :selectable  false\n            :connectable false\n            :draggable   false\n            :position    {:x 0 :y 0}\n            :data        {:label \"Drag some nodes in from the panel above\"}}]))\n\n(defonce edges\n  (r/atom []))\n\n(defn- main []\n  (let [flow      (atom nil)\n        provider  (atom nil)\n        viewport  (r/atom {:x 0 :y 0 :zoom 1})\n        data-type \"application/reagentflow\"]\n    (letfn [(handle-drag [event]\n              (let [data-transfer (-> event .-dataTransfer)]\n                (.setData data-transfer data-type \"default\")\n                (set! (-> data-transfer .-effectAllowed) \"move\")))\n            (handle-node-changes [changes]\n              (reset! nodes (apply-node-changes changes @nodes)))\n            (handle-edge-changes [changes]\n              (reset! edges (apply-edge-changes changes @edges)))\n            (handle-connect [connection]\n              (reset! edges (add-edge connection @edges)))\n            (handle-drop [event]\n              (.preventDefault event)\n              (when-let [node-type (.getData (-> event .-dataTransfer) data-type)]\n                (let [{:keys [screen-to-flow-position]} @provider\n                      flow-el           (-> flow .-state .-firstChild) \n                      rect              (.getBoundingClientRect flow-el)\n                      position          (screen-to-flow-position {:x (.-clientX event)\n                                                                  :y (.-clientY event)})]\n                  (swap! node-id inc)\n                  (swap! nodes conj {:id       (str \"node-\" @node-id)\n                                     :type     node-type\n                                     :position position\n                                     :data     {:label (str \"Node #\" @node-id)}}))))\n            (handle-drag-over [event]\n              (.preventDefault event)\n              (set! (-> event .-dataTransfer .-dropEffect) \"move\"))]\n      (fn []\n        [:<>\n         [:menu.node-palette\n          [:div.node {:draggable     true\n                      :on-drag-start handle-drag} \"Node\"]]\n         [reagent-flow {:ref                  #(reset! flow %)\n                        :id                   :drop-it-like-its-hot\n                        :nodes                @nodes\n                        :edges                @edges\n                        :fit-view             true\n                        :on-init              #(reset! provider %)\n                        :on-nodes-change      handle-node-changes\n                        :on-edges-change      handle-edge-changes\n                        :on-connect           handle-connect\n                        :on-drop              handle-drop\n                        :on-drag-over         handle-drag-over\n                        :on-viewport-change   #(reset! viewport %)\n                        :connection-line-type :smoothstep\n                        :default-edge-options {:type :smoothstep}}\n          [background {:style {:background-color \"#ffffff\"}}]]]))))\n\n(defonce root (atom nil))\n\n(defn error-boundary [& children]\n  (let [error (r/atom nil)]\n    (r/create-class\n     {:display-name                 \"ErrorBoundary\" \n      :get-derived-state-from-error (fn [e] #js {})\n      :component-did-catch          (fn [err info] (reset! error [err info])) \n      :reagent-render\n      (fn [& children]\n        (if (nil? @error)\n          (into [:<>] children)\n          (let [[_ info] @error]\n            [:pre.error\n             [:code (pr-str info)]\n             [:br]\n             [:button {:on-click #(.error js/console info)} \"Output stacktrace\"]])))})))\n\n(defn ^:export init [element]\n  (when (nil? @root)\n    (reset! root (rdom/create-root element))\n    (rdom/render @root [error-boundary [main]])))\n\n(defn ^:export unload [element]\n  (when (not (nil? @root))\n    (rdom/unmount @root)\n    (reset! root nil)))\n"]}